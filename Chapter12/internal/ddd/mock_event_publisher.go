// Code generated by mockery v2.40.1. DO NOT EDIT.

package ddd

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEventPublisher is an autogenerated mock type for the EventPublisher type
type MockEventPublisher[T Event] struct {
	mock.Mock
}

// Publish provides a mock function with given fields: ctx, events
func (_m *MockEventPublisher[T]) Publish(ctx context.Context, events ...T) error {
	_va := make([]interface{}, len(events))
	for _i := range events {
		_va[_i] = events[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...T) error); ok {
		r0 = rf(ctx, events...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockEventPublisher creates a new instance of MockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventPublisher[T Event](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventPublisher[T] {
	mock := &MockEventPublisher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
