// Code generated by mockery v2.40.1. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockShoppingListRepository is an autogenerated mock type for the ShoppingListRepository type
type MockShoppingListRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, shoppingListID
func (_m *MockShoppingListRepository) Find(ctx context.Context, shoppingListID string) (*ShoppingList, error) {
	ret := _m.Called(ctx, shoppingListID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *ShoppingList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ShoppingList, error)); ok {
		return rf(ctx, shoppingListID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ShoppingList); ok {
		r0 = rf(ctx, shoppingListID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shoppingListID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, list
func (_m *MockShoppingListRepository) Save(ctx context.Context, list *ShoppingList) error {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingList) error); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, list
func (_m *MockShoppingListRepository) Update(ctx context.Context, list *ShoppingList) error {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingList) error); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockShoppingListRepository creates a new instance of MockShoppingListRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShoppingListRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShoppingListRepository {
	mock := &MockShoppingListRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
